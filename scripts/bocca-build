#! /bin/env python2.6

from __future__ import print_function

import subprocess
import os
import sys
import shutil
import optparse
import tarfile
import tempfile
import types

from commands import getstatusoutput

#import bocca.bocca_xml
#from bocca.bocca_xml import BadFileError

def bocca_is_sane (bocca_cmd):
  (status, output) = getstatusoutput (bocca_cmd+ ' --version')
  return status == 0

def backup_filename (src, dst, suffix='.orig'):
  """Construct a filename to use as a backup of src in dst.
  """
  src = os.path.normpath (src)
  src_bak = os.path.join (dst, os.path.basename (src) + '.orig')
  if os.path.exists (src_bak):
    base = src_bak
    version = 0
    while os.path.exists (src_bak):
      version += 1
      src_bak = base + '.' + str (version)
  return src_bak

class Verbose (object):
  def __init__ (self, verbosity=0, log=sys.stderr):
    if isinstance (verbosity,types.BooleanType):
      if verbosity is True:
        self._verbosity = sys.maxint
      else:
        self._verbosity = 0
    else:    
      self._verbosity = verbosity
    self._log = log
  def __call__(self, verbosity, msg):
    if verbosity <= self._verbosity:
      print (msg, file=self._log)

example_usage = """
Build a project based on an existing one:
  It's probably best to use $HOME as '~' doesn't always get expanded properly.

  > bocca-build --srcdir=$HOME/project_dir ./build.xml

  The source directory is the base directory of a previouse bocca project.
  That is, a directory created with 'bocca project create'.

Build a project in another directory:

  > bocca-build --srcdir=./project_dir --destdir=$HOME/projects build.xml

  In this case the project will be created under $HOME/projects.  The base
  directory will be created with 'bocca create project' and it's name will be
  determined by the project name given in build.xml.
"""

usage = "usage: make_proj [options] file"
parser = optparse.OptionParser (usage=usage)
parser.add_option ("-C", "--directory", dest="rundir",
                   help="change to directory, then execute",
                   default=".")
parser.add_option ("-S", "--srcdir", dest="srcdir",
                   help="location of source files to import",
                   default=".")
parser.add_option ("-D", "--destdir", dest="dstdir",
                   help="location to create project",
                   default=".")
parser.add_option ("-T", "--tmpdir", dest="tmpdir",
                   help="location of temporary directory",
                   default='.')
parser.add_option ("-N", "--rename", dest="rename",
                   help="Rename the project (override description file)",
                   default=None)
parser.add_option ("-o", "--bocca-opts", dest="bocca_opts",
                   help="Pass comma-separated list of options along to bocca",
                   default='')
parser.add_option ("-b", "--bocca", dest="bocca",
                   help="bocca command to use",
                   default="bocca")
parser.add_option ('-n', "--dry-run",
                   action='store_true', dest='dry_run', default=False,
                   help="Do a dry run (don't actually do anything)")
parser.add_option ('', "--no-import",
                   action='store_true', dest='no_import', default=False,
                   help="Ignore all import requests")
parser.add_option ('-p', "--print-tree",
                   action='store_true', dest='print_tree', default=False,
                   help="Print a tree of what will be built")
parser.add_option ("-v", "--verbose",
                   action="store_true", dest="verbose", default=False,
                   help="Be verbose with output.")
parser.add_option ("", "--help-examples",
                   action="store_true", dest="help_examples", default=False,
                   help="Print some example usages and exit.")
parser.add_option ('', "--new-style",
                   action='store_true', dest='new_style', default=True,
                   help="Parse XML as the new style")
parser.add_option ('', "--old-style",
                   action='store_false', dest='new_style', default=True,
                   help="Parse XML as the old style")

(options, args) = parser.parse_args ()

verbose = Verbose (options.verbose)

if options.help_examples is True:
  print (example_usage)
  sys.exit (0)

if len (args)<1:
  parser.error ("no project file")
build_file = args[0]

if not bocca_is_sane (options.bocca):
  sys.exit ("{0}: unable to execute bocca".format (options.bocca))

rundir = os.path.abspath (options.rundir)
try:
  os.chdir (rundir)
except IOError as (errno, strerror):
  os.exit ("I/O error ({0}): {1}".format (errno, strerror))


build_file = os.path.abspath (build_file)
build_file_dir = os.path.dirname (build_file)

tmpdir = os.path.abspath (options.tmpdir)
srcdir = os.path.abspath (options.srcdir)
dstdir = os.path.abspath (options.dstdir)

verbose (2, "Look for source files in: {0}".format (srcdir))
verbose (2, "Create project directory in: {0}".format (dstdir))
verbose (2, "Read from input file: {0}".format (build_file))

try:
  os.chdir (dstdir)
except OSError:
  sys.exit ("{0}: Error moving to build directory".format (dstdir))

if options.new_style:
  from bocca.bocca_xml2 import parse_file
  from bocca.bocca_xml import BadFileError
else:
  from bocca.bocca_xml import parse_file
  from bocca.bocca_xml import BadFileError

try:
  os.chdir (build_file_dir)
  p = parse_file (build_file, srcdir=srcdir, dstdir=dstdir,
                  no_import=options.no_import)
  os.chdir (dstdir)
except BadFileError as err:
  sys.exit ("{0}: {1}".format (err.file, err.msg))

if options.rename is not None:
  p.set_name (options.rename)

if len (options.bocca_opts) > 0:
  for opt in options.bocca_opts.split (','):
    (key, sep, val) = opt.partition ('=')
    p.add_option (key, val)

if os.path.isdir (os.path.join (dstdir, p.name ())):
  if os.path.samefile (srcdir, os.path.join (dstdir, p.name ())):
    verbose (1, "{0}: Source and destination are the same".format (srcdir))
    verbose (1, "{0}: Moving source".format (tmpdir))
    srcdir_bak = backup_filename (srcdir, tmpdir)
    shutil.move (srcdir, srcdir_bak)
    srcdir = srcdir_bak
    p.set_srcdir (srcdir)

if options.print_tree:
  print (p)
  sys.exit (0)

if options.dry_run:
  p.dry_run ()
else:
  p.run ()

